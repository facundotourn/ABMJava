/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package abmAumno;

import dao.AlumnoDAOBD;
import dao.AlumnoDAOTxt;
import dao.DAO;
import dao.DAOException;
import java.io.File;
import java.io.FileNotFoundException;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import persona.Alumno;
import persona.AlumnoInvalidoException;
import persona.FechaInvalidaException;
import persona.MiCalendar;
import persona.PersonaInvalidaException;

/**
 *
 * @author facundo
 */
public class ABM extends javax.swing.JFrame {

    private File archivoAbierto;
    private boolean nuevo;
    private boolean mostrarA = true;
    private boolean mostrarB = false;

    /**
     * Creates new form ABM
     */
    public ABM() throws SQLException
    {
        dao = daoTxt;
        //dao = new AlumnoDAOBD();
        
        initComponents();
        
        setEstadoDefaultTxt();
        
        miModeloTabla = new MiModeloTabla();
        
        tabla.setModel(miModeloTabla);
        if (daoSelectComboBox.getSelectedIndex() == 1) {
            try {
                miModeloTabla.setLista(dao.getTodos(), mostrarA, mostrarB);
            } catch (DAOException ex) {
                Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nuevoButton = new javax.swing.JButton();
        abrirButton = new javax.swing.JButton();
        guardarButton = new javax.swing.JButton();
        borrarButton = new javax.swing.JButton();
        cancelarButton = new javax.swing.JButton();
        dniFormattedTextField = new javax.swing.JFormattedTextField();
        apynTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sexoComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cantMatAprobFormattedTextField = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        promedioFormattedTextField = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        archivoTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        seleccionarArchivoButton = new javax.swing.JButton();
        estadoComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        fechaIngrDateChooser = new com.toedter.calendar.JDateChooser();
        fechaNacDateChooser = new com.toedter.calendar.JDateChooser();
        mostrarBCheckBox = new javax.swing.JCheckBox();
        mostrarACheckBox = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        daoSelectComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nuevoButton.setText("Nuevo");
        nuevoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoButtonActionPerformed(evt);
            }
        });

        abrirButton.setText("Abrir");
        abrirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirButtonActionPerformed(evt);
            }
        });

        guardarButton.setText("Guardar");
        guardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarButtonActionPerformed(evt);
            }
        });

        borrarButton.setText("Borrar");
        borrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarButtonActionPerformed(evt);
            }
        });

        cancelarButton.setText("Cancelar");
        cancelarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarButtonActionPerformed(evt);
            }
        });

        dniFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        jLabel1.setText("DNI");

        jLabel2.setText("Apell y Nom");

        sexoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "M", "F" }));

        jLabel3.setText("Sexo");

        jLabel4.setText("Fecha Nac.");

        cantMatAprobFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        jLabel5.setText("Cant. Mat. Aprob.");

        jLabel6.setText("Fecha Ingr.");

        jLabel7.setText("Promedio");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        jLabel8.setText("Alumnos");

        archivoTextField.setText("Abrir archivo...");

        jLabel9.setText("Archivo");

        seleccionarArchivoButton.setText("...");
        seleccionarArchivoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarArchivoButtonActionPerformed(evt);
            }
        });

        estadoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B" }));
        estadoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadoComboBoxActionPerformed(evt);
            }
        });

        jLabel10.setText("Estado");

        mostrarBCheckBox.setText("B");
        mostrarBCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarBCheckBoxActionPerformed(evt);
            }
        });

        mostrarACheckBox.setSelected(true);
        mostrarACheckBox.setText("A");
        mostrarACheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarACheckBoxActionPerformed(evt);
            }
        });

        jLabel11.setText("Mostrar:");

        daoSelectComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Archivo de texto", "Base de datos" }));
        daoSelectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                daoSelectComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fechaIngrDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel10))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(promedioFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(estadoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(jLabel9)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(archivoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(seleccionarArchivoButton)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dniFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(apynTextField))
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(sexoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(fechaNacDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel5))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cantMatAprobFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(15, 15, 15)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cancelarButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                            .addComponent(borrarButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(guardarButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(abrirButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nuevoButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(daoSelectComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mostrarACheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mostrarBCheckBox)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(archivoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seleccionarArchivoButton)
                    .addComponent(daoSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nuevoButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(abrirButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(guardarButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(borrarButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelarButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dniFormattedTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(fechaNacDateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(apynTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(sexoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(cantMatAprobFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel10))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(promedioFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(estadoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(fechaIngrDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(48, 48, 48)))
                        .addGap(47, 47, 47)
                        .addComponent(jLabel8)
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mostrarBCheckBox)
                            .addComponent(mostrarACheckBox)
                            .addComponent(jLabel11))
                        .addGap(254, 254, 254))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nuevoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoButtonActionPerformed
        try {
            setEstadoNuevo();
        } catch (FechaInvalidaException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nuevoButtonActionPerformed

    private void seleccionarArchivoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarArchivoButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        
        int resp = fileChooser.showOpenDialog(this);
        
        if(resp != JFileChooser.APPROVE_OPTION)
            return;
        
        archivoAbierto = fileChooser.getSelectedFile();
        
        try
        {
            dao = new AlumnoDAOTxt(archivoAbierto);
        }
        catch (FileNotFoundException ex)
        {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        setEstadoInicial();
        archivoTextField.setText(fileChooser.getName(archivoAbierto));
        
        try {
            miModeloTabla.setLista(dao.getTodos(), mostrarA, mostrarB);
        } catch (DAOException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_seleccionarArchivoButtonActionPerformed
    
    
    private void cancelarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarButtonActionPerformed
        setEstadoInicial();
    }//GEN-LAST:event_cancelarButtonActionPerformed

    private void guardarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarButtonActionPerformed
        Alumno alu = null;
        
        try {
            alu = formularioAAlumno();
        }
        catch (FormularioException | PersonaInvalidaException | FechaInvalidaException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(nuevo) {
            // Es un nuevo alumno, tengo que INSERTAR
            Alumno aux = null;
            
            try {
                aux = dao.buscar(alu.getDni());
            } catch (DAOException ex) {
                Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(aux != null) {
                // El alumno ya existe
                if(aux.getEstado() == 'A') {
                    // El alumno está ACTIVO
                    Object[] options = {"Actualizar", "Cancelar"};
                    int n = JOptionPane.showOptionDialog(null, "El alumno ya se encuentra en el DAO y está activo, eliga una opción para continuar.", "Error", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[1]);
                    if(n == 0) {
                        try {
                            // Eligieron actualizar
                            dao.actualizar(alu);
                        } catch (DAOException ex) {
                            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        // Eligieron cancelar
                        
                    }
                } else {
                    // El alumno NO está activo
                    Object[] options = {"Actualizar", "Reactivar", "Cancelar"};
                    int n = JOptionPane.showOptionDialog(null, "El alumno ya se encuentra en el DAO pero no está activo, eliga una opción para continuar.", "Error", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.DEFAULT_OPTION, null, options, options[1]);
                    
                    if(n == 0) {
                        try {
                            // Eligieron actualizar
                            dao.actualizar(alu);
                        } catch (DAOException ex) {
                            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else if(n == 1) {
                        try {
                            // Eligieron reactivar
                            aux.setEstado('A');
                            dao.actualizar(aux);
                        } catch (AlumnoInvalidoException | DAOException ex) {
                            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        // Eligieron cancelar
                        
                    }
                }
            } else {
                try {
                    // El alumno no existía: insertar normalmente
                    dao.insertar(alu);
                } catch (DAOException ex) {
                    Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else
            try
            {
                dao.actualizar(alu);
            }
            catch (DAOException ex)
            {
                Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        setEstadoInicial();
        
        try {
            miModeloTabla.setLista(dao.getTodos(), mostrarA, mostrarB);
        } catch (DAOException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardarButtonActionPerformed

    
    private void abrirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirButtonActionPerformed
        try
        {
            dniFormattedTextField.commitEdit();
        }
        catch (ParseException ex)
        {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Ingrese un DNI valido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Alumno alu = null;
        try {
            alu = dao.buscar(Integer.valueOf(dniFormattedTextField.getValue().toString()));
        } catch (DAOException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(alu == null)
        {
            JOptionPane.showMessageDialog(this, "No se encontró ningún alumno con ese DNI.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        alumnoAFormulario(alu);
        
        setEstadoAbrir();
    }//GEN-LAST:event_abrirButtonActionPerformed

    private void borrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarButtonActionPerformed
        Alumno alu = null;
        
        try {
            alu = dao.buscar(Integer.valueOf(dniFormattedTextField.getText()));
            
            dao.eliminar(alu);
        
            miModeloTabla.setLista(dao.getTodos(), mostrarA, mostrarB);
        } catch (DAOException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        setEstadoInicial();
    }//GEN-LAST:event_borrarButtonActionPerformed

    private void estadoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadoComboBoxActionPerformed
        
    }//GEN-LAST:event_estadoComboBoxActionPerformed

    private void mostrarACheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarACheckBoxActionPerformed
        mostrarA = mostrarACheckBox.isSelected();
        
        try {
            miModeloTabla.setLista(dao.getTodos(), mostrarA, mostrarB);
        } catch (DAOException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mostrarACheckBoxActionPerformed

    private void mostrarBCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarBCheckBoxActionPerformed
        mostrarB = mostrarBCheckBox.isSelected();
        
        try {
            miModeloTabla.setLista(dao.getTodos(), mostrarA, mostrarB);
        } catch (DAOException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mostrarBCheckBoxActionPerformed

    private void daoSelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_daoSelectComboBoxActionPerformed
        if(daoSelectComboBox.getSelectedIndex() == 0) {
            // Archivo de texto
            dao = daoTxt;
            setEstadoDefaultTxt();
            
            miModeloTabla.setLista(new ArrayList<>(), mostrarA, mostrarB);
            
        } else {
            try {
                // Base de datos
                daoBD = new AlumnoDAOBD();
            } catch (SQLException ex) {
                Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
            }
            dao = daoBD;
            setEstadoDefaultBD();
            
            try {
                miModeloTabla.setLista(dao.getTodos(), mostrarA, mostrarB);
            } catch (DAOException ex) {
                Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_daoSelectComboBoxActionPerformed

    
    
    private boolean checkCampos() {
        return ("".equals(dniFormattedTextField.getText()) 
                || "".equals(apynTextField.getText())
                || "".equals(cantMatAprobFormattedTextField.getText()) 
                || "".equals(promedioFormattedTextField.getText())
                || Integer.valueOf(cantMatAprobFormattedTextField.getText()) < 0);
    }
    
    private Alumno formularioAAlumno() throws FormularioException, PersonaInvalidaException, FechaInvalidaException
    {
        Alumno alu = new Alumno();
        
        if(checkCampos()) {
            throw new FormularioException("Uno o más campos son inválidos o están vacíos.");
        }
        
        commitEdit(dniFormattedTextField, "El DNI es Inválido");
        alu.setDni(((Long)dniFormattedTextField.getValue()).intValue());
        
        alu.setApyn(apynTextField.getText());
        
        alu.setSexo(((String)sexoComboBox.getSelectedItem()).charAt(0));
        
        alu.setFechaNac(new MiCalendar(fechaNacDateChooser.getCalendar()));
        
        commitEdit(cantMatAprobFormattedTextField, "La Cant Mat Aprob es inválida");
        alu.setCantMatAprob(((Long)cantMatAprobFormattedTextField.getValue()).intValue());
        
        alu.setFechaIngr(new MiCalendar(fechaIngrDateChooser.getCalendar()));
        
        commitEdit(promedioFormattedTextField, "El promedio es inválido");
        alu.setPromedio(Double.parseDouble(promedioFormattedTextField.getText()));
        
        alu.setEstado(((String)estadoComboBox.getSelectedItem()).charAt(0));
        
        return alu;
    }
    
    private void alumnoAFormulario(Alumno alu) {
        dniFormattedTextField.setText(String.valueOf(alu.getDni()));
        apynTextField.setText(alu.getApyn());
        
        if(alu.getSexo() == 'M') {
            sexoComboBox.setSelectedIndex(0);
        } else {
            sexoComboBox.setSelectedIndex(1);
        }
        
        fechaNacDateChooser.setCalendar(alu.getFechaNac());
        cantMatAprobFormattedTextField.setText(String.valueOf(alu.getCantMatAprob()));
        fechaIngrDateChooser.setCalendar(alu.getFechaIngr());
        
        if(alu.getEstado() == 'A') {
            estadoComboBox.setSelectedIndex(0);
        } else {
            estadoComboBox.setSelectedIndex(1);
        }
        
        promedioFormattedTextField.setText(String.valueOf(alu.getPromedio()));
    }
    
    private void commitEdit(JFormattedTextField formattedTextField, String mensaje) throws FormularioException
    {
        try {
            formattedTextField.commitEdit();
        } catch (ParseException ex) {
            Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
            throw new FormularioException(mensaje + ": " + ex.getMessage());
        }
    }
    
    // Archivo abierto, campos bloqueados y botones desbloqueados
    private void setEstadoInicial()
    {
        archivoTextField.setEnabled(false);
        
        dniFormattedTextField.setEnabled(true);
        apynTextField.setEnabled(false);
        sexoComboBox.setEnabled(false);
        sexoComboBox.setEnabled(false);
        fechaNacDateChooser.setEnabled(false);
        cantMatAprobFormattedTextField.setEnabled(false);
        fechaIngrDateChooser.setEnabled(false);
        estadoComboBox.setEnabled(false);
        promedioFormattedTextField.setEnabled(false);
        
        
        seleccionarArchivoButton.setEnabled(true);
        nuevoButton.setEnabled(true);
        abrirButton.setEnabled(true);
        guardarButton.setEnabled(false);
        borrarButton.setEnabled(false);
        cancelarButton.setEnabled(false);
        mostrarACheckBox.setEnabled(true);
        mostrarBCheckBox.setEnabled(true);
        
        // mostrarACheckBox.setSelected(true);
    }
    
    // Todo bloqueado menos abrir archivo
    private void setEstadoDefaultTxt()
    {
        archivoTextField.setEnabled(false);
        seleccionarArchivoButton.setEnabled(true);
        
        dniFormattedTextField.setEnabled(false);
        apynTextField.setEnabled(false);
        sexoComboBox.setEnabled(false);
        sexoComboBox.setEnabled(false);
        fechaNacDateChooser.setEnabled(false);
        cantMatAprobFormattedTextField.setEnabled(false);
        fechaIngrDateChooser.setEnabled(false);
        estadoComboBox.setEnabled(false);
        promedioFormattedTextField.setEnabled(false);
        
        nuevoButton.setEnabled(false);
        abrirButton.setEnabled(false);
        guardarButton.setEnabled(false);
        borrarButton.setEnabled(false);
        cancelarButton.setEnabled(false);
        mostrarACheckBox.setEnabled(false);
        mostrarBCheckBox.setEnabled(false);
    }
    
    private void setEstadoDefaultBD()
    {
        archivoTextField.setEnabled(false);
        seleccionarArchivoButton.setEnabled(false);
        
        dniFormattedTextField.setEnabled(true);
        apynTextField.setEnabled(false);
        sexoComboBox.setEnabled(false);
        sexoComboBox.setEnabled(false);
        fechaNacDateChooser.setEnabled(false);
        cantMatAprobFormattedTextField.setEnabled(false);
        fechaIngrDateChooser.setEnabled(false);
        estadoComboBox.setEnabled(false);
        promedioFormattedTextField.setEnabled(false);
        
        nuevoButton.setEnabled(true);
        abrirButton.setEnabled(true);
        guardarButton.setEnabled(false);
        borrarButton.setEnabled(false);
        cancelarButton.setEnabled(false);
        mostrarACheckBox.setEnabled(true);
        mostrarBCheckBox.setEnabled(true);
    }

    private void setEstadoNuevo() throws FechaInvalidaException
    {
        archivoTextField.setEnabled(false);
        seleccionarArchivoButton.setEnabled(false);
        
        dniFormattedTextField.setEnabled(true);
        apynTextField.setEnabled(true);
        sexoComboBox.setEnabled(true);
        fechaNacDateChooser.setEnabled(true);
        cantMatAprobFormattedTextField.setEnabled(true);
        fechaIngrDateChooser.setEnabled(true);
        estadoComboBox.setEnabled(true);
        promedioFormattedTextField.setEnabled(true);
        
        dniFormattedTextField.setText("");
        apynTextField.setText("");
        sexoComboBox.setSelectedIndex(0);
        fechaNacDateChooser.setCalendar(null);
        cantMatAprobFormattedTextField.setText("");
        fechaIngrDateChooser.setCalendar(null);
        estadoComboBox.setSelectedIndex(0);
        promedioFormattedTextField.setText("");
        
        nuevoButton.setEnabled(false);
        abrirButton.setEnabled(false);
        
        guardarButton.setEnabled(true);
        borrarButton.setEnabled(false);
        cancelarButton.setEnabled(true);
        
        nuevo = true;
    }
    
    private void setEstadoAbrir()
    {
        archivoTextField.setEnabled(false);
        seleccionarArchivoButton.setEnabled(false);
        
        dniFormattedTextField.setEnabled(false);
        apynTextField.setEnabled(true);
        sexoComboBox.setEnabled(true);
        sexoComboBox.setEnabled(true);
        fechaNacDateChooser.setEnabled(true);
        cantMatAprobFormattedTextField.setEnabled(true);
        fechaIngrDateChooser.setEnabled(true);
        estadoComboBox.setEnabled(true);
        promedioFormattedTextField.setEnabled(true);
        
        nuevoButton.setEnabled(false);
        abrirButton.setEnabled(false);
        
        guardarButton.setEnabled(true);
        
        if(estadoComboBox.getSelectedIndex() == 1)
            borrarButton.setEnabled(false);
        else
            borrarButton.setEnabled(true);
        
        cancelarButton.setEnabled(true);
        
        nuevo = false;
    }


    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ABM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ABM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ABM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ABM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ABM().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(ABM.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abrirButton;
    private javax.swing.JTextField apynTextField;
    private javax.swing.JTextField archivoTextField;
    private javax.swing.JButton borrarButton;
    private javax.swing.JButton cancelarButton;
    private javax.swing.JFormattedTextField cantMatAprobFormattedTextField;
    private javax.swing.JComboBox<String> daoSelectComboBox;
    private javax.swing.JFormattedTextField dniFormattedTextField;
    private javax.swing.JComboBox<String> estadoComboBox;
    private com.toedter.calendar.JDateChooser fechaIngrDateChooser;
    private com.toedter.calendar.JDateChooser fechaNacDateChooser;
    private javax.swing.JButton guardarButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox mostrarACheckBox;
    private javax.swing.JCheckBox mostrarBCheckBox;
    private javax.swing.JButton nuevoButton;
    private javax.swing.JFormattedTextField promedioFormattedTextField;
    private javax.swing.JButton seleccionarArchivoButton;
    private javax.swing.JComboBox<String> sexoComboBox;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
    
    private DAO<Alumno, Integer> dao;
    private AlumnoDAOBD daoBD;
    private AlumnoDAOTxt daoTxt;
    private MiModeloTabla miModeloTabla;
}
